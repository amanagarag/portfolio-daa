<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Case Studies</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            color: #333;
        }
        header {
            background: linear-gradient(to right, #6a11cb, #2575fc);
            color: white;
            padding: 20px;
            text-align: center;
        }
        .container {
            width: 90%;
            margin: 20px auto;
        }
        .case-study {
            background-color: #fff;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            transition: transform 0.3s;
        }
        .case-study:hover {
            transform: translateY(-5px);
        }
        .case-study h2 {
            color: #6a11cb;
            font-size: 24px;
        }
        .case-study p, .case-study ul {
            font-size: 16px;
            color: #555;
            line-height: 1.6;
        }
        .case-study ul li strong {
            color: #333;
        }
        footer {
            background-color: #333;
            color: white;
            text-align: center;
            padding: 10px;
            position: fixed;
            width: 100%;
            bottom: 0;
        }
        .solution-box {
            background-color: #f9f9f9;
            border: 1px solid #ddd;
            padding: 10px;
            margin-top: 10px;
            border-radius: 5px;
        }
        .solution-box pre {
            background: #272822;
            color: #f8f8f2;
            padding: 10px;
            border-radius: 5px;
            overflow-x: auto;
        }
    </style>
</head>
<body>

    <header>
        <h1>Case Studies</h1>
    </header>

    <div class="container">
        <!-- Case Study 1: Unavailability of School Bus -->
        <div class="case-study">
            <h2>1. Unavailability of School Bus</h2>
            <p>The unavailability of school buses has been a major issue for students, especially in rural areas. In many regions, children are unable to attend school due to the lack of proper transportation options.</p>
            <ul>
                <li><strong>Problem:</strong> Students have to travel long distances on foot, which can be dangerous, especially during extreme weather conditions.</li>
                <li><strong>Impact:</strong> High absenteeism, students arriving late, and physical exhaustion.</li>
                <li><strong>Possible Solution:</strong> Implementing optimal bus routing algorithms like Dijkstra's algorithm or Bellman-Ford to improve route efficiency and reduce operational costs.</li>
            </ul>
            <div class="solution-box">
                <h3>Algorithmic Solution</h3>
                <pre>
function findOptimalRoute(graph, startNode) {
    const distances = {};
    const visited = new Set();
    const priorityQueue = new PriorityQueue();

    graph.forEach(node => distances[node] = Infinity);
    distances[startNode] = 0;
    priorityQueue.enqueue(startNode, 0);

    while (!priorityQueue.isEmpty()) {
        const { node, distance } = priorityQueue.dequeue();

        if (visited.has(node)) continue;
        visited.add(node);

        graph[node].forEach(neighbor => {
            const newDist = distance + neighbor.weight;
            if (newDist < distances[neighbor.node]) {
                distances[neighbor.node] = newDist;
                priorityQueue.enqueue(neighbor.node, newDist);
            }
        });
    }

    return distances;
}
                </pre>
            </div>
        </div>

        <!-- Case Study 2: No Ambulance Putting Life at Risk -->
        <div class="case-study">
            <h2>2. No Ambulance Putting Life at Risk</h2>
            <p>In many rural and underdeveloped areas, the absence of an ambulance service can lead to the loss of life during medical emergencies.</p>
            <ul>
                <li><strong>Problem:</strong> Critical medical emergencies are delayed due to no ambulance availability.</li>
                <li><strong>Impact:</strong> Increased mortality rates and overcrowded local healthcare facilities.</li>
                <li><strong>Possible Solution:</strong> Use resource allocation algorithms like the Hungarian algorithm to optimize ambulance dispatch based on demand hotspots.</li>
            </ul>
            <div class="solution-box">
                <h3>Algorithmic Solution</h3>
                <pre>
function allocateAmbulances(hospitals, emergencies) {
    const costMatrix = createCostMatrix(hospitals, emergencies);
    return hungarianAlgorithm(costMatrix);
}

function createCostMatrix(hospitals, emergencies) {
    const matrix = [];
    hospitals.forEach(hospital => {
        const row = emergencies.map(emergency => calculateDistance(hospital, emergency));
        matrix.push(row);
    });
    return matrix;
}
                </pre>
            </div>
        </div>

        <!-- Case Study 3: Unavailability of Solar System -->
        <div class="case-study">
            <h2>3. Unavailability of Solar System</h2>
            <p>Remote areas lack access to a reliable power supply. Solar systems can be an ideal solution, but their unavailability prevents communities from accessing sustainable and affordable energy.</p>
            <ul>
                <li><strong>Problem:</strong> Lack of infrastructure to install and maintain solar systems in remote areas.</li>
                <li><strong>Impact:</strong> Dependency on non-renewable energy sources and higher energy costs.</li>
                <li><strong>Possible Solution:</strong> Implement solar panel placement algorithms using techniques like Genetic Algorithms to maximize efficiency and coverage.</li>
            </ul>
            <div class="solution-box">
                <h3>Algorithmic Solution</h3>
                <pre>
function optimizeSolarPlacement(areaGrid, constraints) {
    const population = initializePopulation(areaGrid);
    for (let generation = 0; generation < MAX_GENERATIONS; generation++) {
        population = evolvePopulation(population, constraints);
    }
    return selectBestSolution(population);
}
                </pre>
            </div>
        </div>
    </div>

    <footer>
        <p>&copy; 2024 Critical Infrastructure Case Studies. All rights reserved.</p>
    </footer>

</body>
</html>
